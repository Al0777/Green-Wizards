{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Families_Share-platform\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Families_Share-platform\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Families_Share-platform\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Families_Share-platform\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Families_Share-platform\\\\client\\\\src\\\\components\\\\LanguageContext.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nimport PropTypes from \"prop-types\";\nimport languageActions from \"../Actions/LanguageActions\";\nimport \"moment/locale/de\";\nimport \"moment/locale/el\";\nimport \"moment/locale/nl\";\nimport \"moment/locale/it\";\nimport \"moment/locale/hu\";\nimport \"moment/locale/fr\";\nvar LanguageContext = React.createContext();\n\nvar LanguageProvider = /*#__PURE__*/function (_React$Component) {\n  _inherits(LanguageProvider, _React$Component);\n\n  var _super = _createSuper(LanguageProvider);\n\n  function LanguageProvider(props) {\n    var _this;\n\n    _classCallCheck(this, LanguageProvider);\n\n    _this = _super.call(this, props);\n\n    _this.updateLanguage = function (language) {\n      var dispatch = _this.props.dispatch;\n      dispatch(languageActions.update(language));\n\n      _this.setState({\n        language: language\n      });\n\n      if (process.env.REACT_APP_CITYLAB === \"Budapest\") {\n        moment.locale(language, {\n          week: {\n            dow: 1,\n            doy: 1\n          }\n        });\n      } else {\n        moment.locale(language);\n      }\n    };\n\n    var _language = \"\";\n\n    if (localStorage.getItem(\"language\")) {\n      _language = localStorage.getItem(\"language\");\n    } else {\n      localStorage.setItem(\"language\", process.env.REACT_APP_CITYLAB_LANGUAGES.split(' ')[0]);\n      _language = process.env.REACT_APP_CITYLAB_LANGUAGES.split(' ')[0];\n    }\n\n    _this.state = {\n      language: _language\n    };\n    moment.locale(_language);\n    return _this;\n  }\n\n  _createClass(LanguageProvider, [{\n    key: \"render\",\n    value: function render() {\n      var language = this.state.language;\n      var children = this.props.children;\n      return /*#__PURE__*/React.createElement(LanguageContext.Provider, {\n        value: {\n          language: language,\n          updateLanguage: this.updateLanguage\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 7\n        }\n      }, children);\n    }\n  }]);\n\n  return LanguageProvider;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  var language = state.language;\n  return {\n    language: language\n  };\n}\n\nvar connectedLanguageProvider = connect(mapStateToProps)(LanguageProvider);\nexport { connectedLanguageProvider as LanguageProvider }; // This function takes a component...\n\nexport default function WithLanguage(Component) {\n  // ...and returns another component...\n  return function LanguageComponent(props) {\n    var _this2 = this;\n\n    // ... and renders the wrapped component with the context theme!\n    // Notice that we pass through any additional props as well\n    return /*#__PURE__*/React.createElement(LanguageContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, function (_ref) {\n      var language = _ref.language,\n          updateLanguage = _ref.updateLanguage;\n      return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n        language: language,\n        updateLanguage: updateLanguage,\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }\n      }));\n    });\n  };\n}\nLanguageProvider.propTypes = {\n  children: PropTypes.node,\n  dispatch: PropTypes.func\n};","map":{"version":3,"sources":["C:/Users/nucle/Documents/GitHub/Families_Share-platform/client/src/components/LanguageContext.js"],"names":["React","connect","moment","PropTypes","languageActions","LanguageContext","createContext","LanguageProvider","props","updateLanguage","language","dispatch","update","setState","process","env","REACT_APP_CITYLAB","locale","week","dow","doy","localStorage","getItem","setItem","REACT_APP_CITYLAB_LANGUAGES","split","state","children","Component","mapStateToProps","connectedLanguageProvider","WithLanguage","LanguageComponent","propTypes","node","func"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport PropTypes from \"prop-types\";\r\nimport languageActions from \"../Actions/LanguageActions\";\r\nimport \"moment/locale/de\";\r\nimport \"moment/locale/el\";\r\nimport \"moment/locale/nl\";\r\nimport \"moment/locale/it\";\r\nimport \"moment/locale/hu\";\r\nimport \"moment/locale/fr\";\r\n\r\n\r\nconst LanguageContext = React.createContext();\r\n\r\nclass LanguageProvider extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let language = \"\";\r\n    if (localStorage.getItem(\"language\")) {\r\n      language = localStorage.getItem(\"language\");\r\n    } else {\r\n      localStorage.setItem(\r\n        \"language\",\r\n        process.env.REACT_APP_CITYLAB_LANGUAGES.split(' ')[0]\r\n      );\r\n      language = process.env.REACT_APP_CITYLAB_LANGUAGES.split(' ')[0]\r\n    }\r\n    this.state = {\r\n      language\r\n    };\r\n    moment.locale(language);\r\n  }\r\n\r\n  updateLanguage = language => {\r\n    const { dispatch } = this.props;\r\n    dispatch(languageActions.update(language));\r\n    this.setState({ language });\r\n    if (process.env.REACT_APP_CITYLAB === \"Budapest\") {\r\n      moment.locale(language, {\r\n        week: {\r\n          dow: 1,\r\n          doy: 1\r\n        }\r\n      });\r\n    } else {\r\n      moment.locale(language);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { language } = this.state;\r\n    const { children } = this.props;\r\n    return (\r\n      <LanguageContext.Provider\r\n        value={{\r\n          language,\r\n          updateLanguage: this.updateLanguage\r\n        }}\r\n      >\r\n        {children}\r\n      </LanguageContext.Provider>\r\n    );\r\n  }\r\n}\r\nfunction mapStateToProps(state) {\r\n  const { language } = state;\r\n  return {\r\n    language\r\n  };\r\n}\r\n\r\nconst connectedLanguageProvider = connect(mapStateToProps)(LanguageProvider);\r\nexport { connectedLanguageProvider as LanguageProvider };\r\n\r\n// This function takes a component...\r\nexport default function WithLanguage(Component) {\r\n  // ...and returns another component...\r\n  return function LanguageComponent(props) {\r\n    // ... and renders the wrapped component with the context theme!\r\n    // Notice that we pass through any additional props as well\r\n    return (\r\n      <LanguageContext.Consumer>\r\n        {({ language, updateLanguage }) => (\r\n          <Component\r\n            {...props}\r\n            language={language}\r\n            updateLanguage={updateLanguage}\r\n          />\r\n        )}\r\n      </LanguageContext.Consumer>\r\n    );\r\n  };\r\n}\r\n\r\nLanguageProvider.propTypes = {\r\n  children: PropTypes.node,\r\n  dispatch: PropTypes.func\r\n};\r\n"]},"metadata":{},"sourceType":"module"}