{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _toConsumableArray from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\src\\\\components\\\\ManagePlanScreen.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport { withSnackbar } from \"notistack\";\nimport withLanguage from \"./LanguageContext\";\nimport Texts from \"../Constants/Texts\";\nimport ConfirmDialog from \"./ConfirmDialog\";\nimport ManagePlanStepper from \"./ManagePlanStepper\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport PlanOptionsModal from \"./OptionsModal\";\nimport Log from \"./Log\";\n\nvar fetchPlan = function fetchPlan(groupId, planId) {\n  return axios.get(\"/api/groups/\".concat(groupId, \"/plans/\").concat(planId)).then(function (response) {\n    return response.data;\n  }).catch(function (err) {\n    Log.error(err);\n    return {\n      name: \"\",\n      from: new Date(),\n      to: new Date(),\n      description: \"\",\n      location: \"\",\n      availabilities: [],\n      needs: []\n    };\n  });\n};\n\nvar fetchGroupMembers = function fetchGroupMembers(groupId) {\n  return axios.get(\"/api/groups/\".concat(groupId, \"/members\")).then(function (response) {\n    return response.data;\n  }).catch(function (err) {\n    Log.error(err);\n    return [];\n  });\n};\n\nvar fetchMyChildren = function fetchMyChildren(userId) {\n  return axios.get(\"/api/users/\".concat(userId, \"/children\")).then(function (response) {\n    return response.data.map(function (c) {\n      return c.child_id;\n    });\n  }).catch(function (err) {\n    Log.error(err);\n    return [];\n  });\n};\n\nvar fetchChildProfiles = function fetchChildProfiles(ids) {\n  return axios.get(\"/api/children\", {\n    params: {\n      ids: ids,\n      searchBy: \"ids\"\n    }\n  }).then(function (response) {\n    return response.data;\n  }).catch(function (err) {\n    Log.error(err);\n    return [];\n  });\n};\n\nvar fetchParentsProfiles = function fetchParentsProfiles(ids) {\n  return axios.get(\"/api/profiles\", {\n    params: {\n      ids: ids,\n      searchBy: \"ids\"\n    }\n  }).then(function (response) {\n    return response.data;\n  }).catch(function (err) {\n    Log.error(err);\n    return [];\n  });\n};\n\nvar ManagePlanScreen = /*#__PURE__*/function (_React$Component) {\n  _inherits(ManagePlanScreen, _React$Component);\n\n  var _super = _createSuper(ManagePlanScreen);\n\n  function ManagePlanScreen(props) {\n    var _this;\n\n    _classCallCheck(this, ManagePlanScreen);\n\n    _this = _super.call(this, props);\n\n    _this.handleDelete = function () {\n      var _this$props = _this.props,\n          match = _this$props.match,\n          history = _this$props.history;\n      var _match$params = match.params,\n          planId = _match$params.planId,\n          groupId = _match$params.groupId;\n      axios.delete(\"/api/groups/\".concat(groupId, \"/plans/\").concat(planId)).then(function (response) {\n        Log.info(response);\n        history.goBack();\n      }).catch(function (err) {\n        Log.error(err);\n      });\n    };\n\n    _this.handleConfirmDialogClose = function (choice) {\n      var confirmDialogAction = _this.state.confirmDialogAction;\n\n      if (choice === \"agree\") {\n        if (confirmDialogAction === \"delete\") {\n          _this.handleDelete();\n        } else {\n          _this.handleExport();\n        }\n      }\n\n      _this.setState({\n        confirmDialogIsOpen: false,\n        confirmDialogTitle: \"\",\n        confirmDialogAction: \"\"\n      });\n    };\n\n    _this.handleConfirmDialogOpen = function (action) {\n      var language = _this.props.language;\n      var texts = Texts[language].managePlanScreen;\n      var confirmDialogTitle = action === \"delete\" ? texts.deleteConfirm : texts.exportConfirm;\n\n      _this.setState({\n        confirmDialogTitle: confirmDialogTitle,\n        confirmDialogAction: action,\n        confirmDialogIsOpen: true,\n        optionsModalIsOpen: false\n      });\n    };\n\n    _this.handleEdit = function () {\n      var history = _this.props.history;\n      var pathname = history.location.pathname;\n      history.push(\"\".concat(pathname, \"/edit\"));\n    };\n\n    _this.handleExport = function () {\n      var _this$props2 = _this.props,\n          match = _this$props2.match,\n          enqueueSnackbar = _this$props2.enqueueSnackbar,\n          language = _this$props2.language;\n      var _match$params2 = match.params,\n          planId = _match$params2.planId,\n          groupId = _match$params2.groupId;\n      var texts = Texts[language].managePlanScreen;\n      axios.post(\"/api/groups/\".concat(groupId, \"/plans/\").concat(planId, \"/export\")).then(function (response) {\n        Log.info(response);\n        enqueueSnackbar(texts.exportToaster, {\n          variant: \"info\"\n        });\n      }).catch(function (err) {\n        Log.error(err);\n      });\n    };\n\n    _this.handleOptionsModalClose = function () {\n      _this.setState({\n        optionsModalIsOpen: false\n      });\n    };\n\n    _this.state = {\n      fetchedPlan: false,\n      confirmDialogIsOpen: false,\n      confirmDialogTitle: \"\",\n      optionsModalIsOpen: false\n    };\n    return _this;\n  }\n\n  _createClass(ManagePlanScreen, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var match, _match$params3, groupId, planId, userId, members, plan, childIds, parents, parentIds, children, userIsAdmin;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                match = this.props.match;\n                _match$params3 = match.params, groupId = _match$params3.groupId, planId = _match$params3.planId;\n                userId = JSON.parse(localStorage.getItem(\"user\")).id;\n                _context.next = 5;\n                return fetchGroupMembers(groupId);\n\n              case 5:\n                members = _context.sent;\n                _context.next = 8;\n                return fetchPlan(groupId, planId);\n\n              case 8:\n                plan = _context.sent;\n                childIds = [];\n                parents = [];\n\n                if (!(plan.state === \"planning\")) {\n                  _context.next = 21;\n                  break;\n                }\n\n                parentIds = members.filter(function (m) {\n                  return m.user_accepted && m.group_accepted;\n                }).map(function (m) {\n                  return m.user_id;\n                });\n                plan.solution.forEach(function (slot) {\n                  slot.children.forEach(function (child) {\n                    childIds.push(child);\n                  });\n                });\n                parentIds = _toConsumableArray(new Set(parentIds));\n                childIds = _toConsumableArray(new Set(childIds));\n                _context.next = 18;\n                return fetchParentsProfiles(parentIds);\n\n              case 18:\n                parents = _context.sent;\n                _context.next = 24;\n                break;\n\n              case 21:\n                _context.next = 23;\n                return fetchMyChildren(userId);\n\n              case 23:\n                childIds = _context.sent;\n\n              case 24:\n                _context.next = 26;\n                return fetchChildProfiles(childIds);\n\n              case 26:\n                children = _context.sent;\n                userIsAdmin = members.find(function (m) {\n                  return m.user_id === userId;\n                }).admin;\n                this.setState({\n                  fetchedPlan: true,\n                  plan: plan,\n                  children: children,\n                  parents: parents,\n                  userIsAdmin: userIsAdmin\n                });\n\n              case 29:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          language = _this$props3.language,\n          history = _this$props3.history;\n      var _this$state = this.state,\n          fetchedPlan = _this$state.fetchedPlan,\n          plan = _this$state.plan,\n          children = _this$state.children,\n          parents = _this$state.parents,\n          userIsAdmin = _this$state.userIsAdmin,\n          confirmDialogTitle = _this$state.confirmDialogTitle,\n          confirmDialogIsOpen = _this$state.confirmDialogIsOpen,\n          optionsModalIsOpen = _this$state.optionsModalIsOpen;\n      var texts = Texts[language].managePlanScreen;\n      var options = [{\n        label: texts.edit,\n        style: \"optionsModalButton\",\n        handle: this.handleEdit\n      }, {\n        label: texts.export,\n        style: \"optionsModalButton\",\n        handle: function handle() {\n          return _this2.handleConfirmDialogOpen(\"export\");\n        }\n      }, {\n        label: texts.delete,\n        style: \"optionsModalButton\",\n        handle: function handle() {\n          return _this2.handleConfirmDialogOpen(\"delete\");\n        }\n      }];\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ConfirmDialog, {\n        title: confirmDialogTitle,\n        isOpen: confirmDialogIsOpen,\n        handleClose: this.handleConfirmDialogClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(PlanOptionsModal, {\n        isOpen: optionsModalIsOpen,\n        options: options,\n        handleClose: this.handleOptionsModalClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        id: \"createPlanContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"activityHeaderContainer\",\n        className: \"row no-gutters\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-2-10\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: \"transparentButton center\",\n        onClick: function onClick() {\n          return history.goBack();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fas fa-arrow-left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 17\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-7-10\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        className: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 15\n        }\n      }, texts.backNavTitle)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-1-10\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }\n      }, userIsAdmin && /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: \"transparentButton center\",\n        onClick: function onClick() {\n          return _this2.setState({\n            optionsModalIsOpen: true\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fas fa-ellipsis-v\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 19\n        }\n      })))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"createPlanMainContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }\n      }, fetchedPlan ? /*#__PURE__*/React.createElement(ManagePlanStepper, {\n        plan: plan,\n        myChildren: children,\n        childrenProfiles: children,\n        parentsProfiles: parents,\n        userIsAdmin: userIsAdmin,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 15\n        }\n      }) : /*#__PURE__*/React.createElement(LoadingSpinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 15\n        }\n      }))));\n    }\n  }]);\n\n  return ManagePlanScreen;\n}(React.Component);\n\nManagePlanScreen.propTypes = {\n  language: PropTypes.string,\n  history: PropTypes.object,\n  match: PropTypes.object,\n  enqueueSnackbar: PropTypes.func\n};\nexport default withSnackbar(withLanguage(ManagePlanScreen));","map":{"version":3,"sources":["C:/Users/nucle/Documents/GitHub/Green-Wizards/client/src/components/ManagePlanScreen.js"],"names":["React","PropTypes","axios","withSnackbar","withLanguage","Texts","ConfirmDialog","ManagePlanStepper","LoadingSpinner","PlanOptionsModal","Log","fetchPlan","groupId","planId","get","then","response","data","catch","err","error","name","from","Date","to","description","location","availabilities","needs","fetchGroupMembers","fetchMyChildren","userId","map","c","child_id","fetchChildProfiles","ids","params","searchBy","fetchParentsProfiles","ManagePlanScreen","props","handleDelete","match","history","delete","info","goBack","handleConfirmDialogClose","choice","confirmDialogAction","state","handleExport","setState","confirmDialogIsOpen","confirmDialogTitle","handleConfirmDialogOpen","action","language","texts","managePlanScreen","deleteConfirm","exportConfirm","optionsModalIsOpen","handleEdit","pathname","push","enqueueSnackbar","post","exportToaster","variant","handleOptionsModalClose","fetchedPlan","JSON","parse","localStorage","getItem","id","members","plan","childIds","parents","parentIds","filter","m","user_accepted","group_accepted","user_id","solution","forEach","slot","children","child","Set","userIsAdmin","find","admin","options","label","edit","style","handle","export","backNavTitle","Component","propTypes","string","object","func"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport axios from \"axios\";\r\nimport { withSnackbar } from \"notistack\";\r\nimport withLanguage from \"./LanguageContext\";\r\nimport Texts from \"../Constants/Texts\";\r\nimport ConfirmDialog from \"./ConfirmDialog\";\r\nimport ManagePlanStepper from \"./ManagePlanStepper\";\r\nimport LoadingSpinner from \"./LoadingSpinner\";\r\nimport PlanOptionsModal from \"./OptionsModal\";\r\n\r\nimport Log from \"./Log\";\r\n\r\nconst fetchPlan = (groupId, planId) => {\r\n  return axios\r\n    .get(`/api/groups/${groupId}/plans/${planId}`)\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n\r\n    .catch(err => {\r\n      Log.error(err);\r\n      return {\r\n        name: \"\",\r\n        from: new Date(),\r\n        to: new Date(),\r\n        description: \"\",\r\n        location: \"\",\r\n        availabilities: [],\r\n        needs: []\r\n      };\r\n    });\r\n};\r\n\r\nconst fetchGroupMembers = groupId => {\r\n  return axios\r\n    .get(`/api/groups/${groupId}/members`)\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n\r\n    .catch(err => {\r\n      Log.error(err);\r\n      return [];\r\n    });\r\n};\r\n\r\nconst fetchMyChildren = userId => {\r\n  return axios\r\n    .get(`/api/users/${userId}/children`)\r\n    .then(response => {\r\n      return response.data.map(c => c.child_id);\r\n    })\r\n\r\n    .catch(err => {\r\n      Log.error(err);\r\n      return [];\r\n    });\r\n};\r\n\r\nconst fetchChildProfiles = ids => {\r\n  return axios\r\n    .get(\"/api/children\", {\r\n      params: {\r\n        ids,\r\n        searchBy: \"ids\"\r\n      }\r\n    })\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n\r\n    .catch(err => {\r\n      Log.error(err);\r\n      return [];\r\n    });\r\n};\r\n\r\nconst fetchParentsProfiles = ids => {\r\n  return axios\r\n    .get(\"/api/profiles\", {\r\n      params: {\r\n        ids,\r\n        searchBy: \"ids\"\r\n      }\r\n    })\r\n    .then(response => {\r\n      return response.data;\r\n    })\r\n\r\n    .catch(err => {\r\n      Log.error(err);\r\n      return [];\r\n    });\r\n};\r\n\r\nclass ManagePlanScreen extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fetchedPlan: false,\r\n      confirmDialogIsOpen: false,\r\n      confirmDialogTitle: \"\",\r\n      optionsModalIsOpen: false\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const { match } = this.props;\r\n    const { groupId, planId } = match.params;\r\n    const userId = JSON.parse(localStorage.getItem(\"user\")).id;\r\n    const members = await fetchGroupMembers(groupId);\r\n    const plan = await fetchPlan(groupId, planId);\r\n    let childIds = [];\r\n    let parents = [];\r\n    if (plan.state === \"planning\") {\r\n      let parentIds = members\r\n        .filter(m => m.user_accepted && m.group_accepted)\r\n        .map(m => m.user_id);\r\n      plan.solution.forEach(slot => {\r\n        slot.children.forEach(child => {\r\n          childIds.push(child);\r\n        });\r\n      });\r\n      parentIds = [...new Set(parentIds)];\r\n      childIds = [...new Set(childIds)];\r\n      parents = await fetchParentsProfiles(parentIds);\r\n    } else {\r\n      childIds = await fetchMyChildren(userId);\r\n    }\r\n    const children = await fetchChildProfiles(childIds);\r\n    const userIsAdmin = members.find(m => m.user_id === userId).admin;\r\n    this.setState({ fetchedPlan: true, plan, children, parents, userIsAdmin });\r\n  }\r\n\r\n  handleDelete = () => {\r\n    const { match, history } = this.props;\r\n    const { planId, groupId } = match.params;\r\n    axios\r\n      .delete(`/api/groups/${groupId}/plans/${planId}`)\r\n      .then(response => {\r\n        Log.info(response);\r\n        history.goBack();\r\n      })\r\n      .catch(err => {\r\n        Log.error(err);\r\n      });\r\n  };\r\n\r\n  handleConfirmDialogClose = choice => {\r\n    const { confirmDialogAction } = this.state;\r\n    if (choice === \"agree\") {\r\n      if (confirmDialogAction === \"delete\") {\r\n        this.handleDelete();\r\n      } else {\r\n        this.handleExport();\r\n      }\r\n    }\r\n    this.setState({\r\n      confirmDialogIsOpen: false,\r\n      confirmDialogTitle: \"\",\r\n      confirmDialogAction: \"\"\r\n    });\r\n  };\r\n\r\n  handleConfirmDialogOpen = action => {\r\n    const { language } = this.props;\r\n    const texts = Texts[language].managePlanScreen;\r\n    const confirmDialogTitle =\r\n      action === \"delete\" ? texts.deleteConfirm : texts.exportConfirm;\r\n    this.setState({\r\n      confirmDialogTitle,\r\n      confirmDialogAction: action,\r\n      confirmDialogIsOpen: true,\r\n      optionsModalIsOpen: false\r\n    });\r\n  };\r\n\r\n  handleEdit = () => {\r\n    const { history } = this.props;\r\n    const { pathname } = history.location;\r\n    history.push(`${pathname}/edit`);\r\n  };\r\n\r\n  handleExport = () => {\r\n    const { match, enqueueSnackbar, language } = this.props;\r\n    const { planId, groupId } = match.params;\r\n    const texts = Texts[language].managePlanScreen;\r\n    axios\r\n      .post(`/api/groups/${groupId}/plans/${planId}/export`)\r\n      .then(response => {\r\n        Log.info(response);\r\n        enqueueSnackbar(texts.exportToaster, {\r\n          variant: \"info\"\r\n        });\r\n      })\r\n      .catch(err => {\r\n        Log.error(err);\r\n      });\r\n  };\r\n\r\n  handleOptionsModalClose = () => {\r\n    this.setState({ optionsModalIsOpen: false });\r\n  };\r\n\r\n  render() {\r\n    const { language, history } = this.props;\r\n    const {\r\n      fetchedPlan,\r\n      plan,\r\n      children,\r\n      parents,\r\n      userIsAdmin,\r\n      confirmDialogTitle,\r\n      confirmDialogIsOpen,\r\n      optionsModalIsOpen\r\n    } = this.state;\r\n    const texts = Texts[language].managePlanScreen;\r\n    const options = [\r\n      {\r\n        label: texts.edit,\r\n        style: \"optionsModalButton\",\r\n        handle: this.handleEdit\r\n      },\r\n      {\r\n        label: texts.export,\r\n        style: \"optionsModalButton\",\r\n        handle: () => this.handleConfirmDialogOpen(\"export\")\r\n      },\r\n      {\r\n        label: texts.delete,\r\n        style: \"optionsModalButton\",\r\n        handle: () => this.handleConfirmDialogOpen(\"delete\")\r\n      }\r\n    ];\r\n    return (\r\n      <React.Fragment>\r\n        <ConfirmDialog\r\n          title={confirmDialogTitle}\r\n          isOpen={confirmDialogIsOpen}\r\n          handleClose={this.handleConfirmDialogClose}\r\n        />\r\n        <PlanOptionsModal\r\n          isOpen={optionsModalIsOpen}\r\n          options={options}\r\n          handleClose={this.handleOptionsModalClose}\r\n        />\r\n        <div id=\"createPlanContainer\">\r\n          <div id=\"activityHeaderContainer\" className=\"row no-gutters\">\r\n            <div className=\"col-2-10\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"transparentButton center\"\r\n                onClick={() => history.goBack()}\r\n              >\r\n                <i className=\"fas fa-arrow-left\" />\r\n              </button>\r\n            </div>\r\n            <div className=\"col-7-10\">\r\n              <h1 className=\"center\">{texts.backNavTitle}</h1>\r\n            </div>\r\n\r\n            <div className=\"col-1-10\">\r\n              {userIsAdmin && (\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"transparentButton center\"\r\n                  onClick={() => this.setState({ optionsModalIsOpen: true })}\r\n                >\r\n                  <i className=\"fas fa-ellipsis-v\" />\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"createPlanMainContainer\">\r\n            {fetchedPlan ? (\r\n              <ManagePlanStepper\r\n                plan={plan}\r\n                myChildren={children}\r\n                childrenProfiles={children}\r\n                parentsProfiles={parents}\r\n                userIsAdmin={userIsAdmin}\r\n              />\r\n            ) : (\r\n              <LoadingSpinner />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nManagePlanScreen.propTypes = {\r\n  language: PropTypes.string,\r\n  history: PropTypes.object,\r\n  match: PropTypes.object,\r\n  enqueueSnackbar: PropTypes.func\r\n};\r\n\r\nexport default withSnackbar(withLanguage(ManagePlanScreen));\r\n"]},"metadata":{},"sourceType":"module"}