{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\src\\\\components\\\\ChangePasswordScreen.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport PropTypes from \"prop-types\";\nimport * as path from \"lodash.get\";\nimport Texts from \"../Constants/Texts\";\nimport withLanguage from \"./LanguageContext\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport Log from \"./Log\";\n\nvar ChangePasswordScreen = /*#__PURE__*/function (_React$Component) {\n  _inherits(ChangePasswordScreen, _React$Component);\n\n  var _super = _createSuper(ChangePasswordScreen);\n\n  function ChangePasswordScreen() {\n    var _this;\n\n    _classCallCheck(this, ChangePasswordScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      password: \"\",\n      passwordConfirm: \"\",\n      formIsValidated: false,\n      fetchedProfile: false,\n      error: false\n    };\n\n    _this.handleChange = function (event) {\n      var _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n      var language = _this.props.language;\n      var _this$state = _this.state,\n          password = _this$state.password,\n          passwordConfirm = _this$state.passwordConfirm;\n\n      if (name === \"passwordConfirm\") {\n        if (password !== value) {\n          event.target.setCustomValidity(Texts[language].changePasswordScreen.err);\n        } else {\n          event.target.setCustomValidity(\"\");\n        }\n      }\n\n      if (name === \"password\") {\n        if (passwordConfirm !== value) {\n          document.getElementById(\"passwordConfirm\").setCustomValidity(Texts[language].changePasswordScreen.error);\n        } else {\n          document.getElementById(\"passwordConfirm\").setCustomValidity(\"\");\n        }\n      }\n\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.handleSubmit = function (event) {\n      var _this$props = _this.props,\n          match = _this$props.match,\n          history = _this$props.history;\n      var token = match.params.token;\n      var password = _this.state.password;\n      event.preventDefault();\n\n      if (_this.validate()) {\n        axios.post(\"/api/users/changepassword\", {\n          password: password\n        }, {\n          headers: {\n            Authorization: token\n          }\n        }).then(function (response) {\n          var user = response.data;\n          localStorage.setItem(\"user\", JSON.stringify(user));\n          history.replace(\"/myfamiliesshare\");\n        }).catch(function (error) {\n          Log.error(error);\n          history.push(\"/\");\n        });\n      }\n\n      _this.setState({\n        formIsValidated: true\n      });\n    };\n\n    _this.validate = function () {\n      var language = _this.props.language;\n      var acceptTerms = _this.state.acceptTerms;\n      var texts = Texts[language];\n      var formLength = _this.formEl.length;\n\n      if (_this.formEl.checkValidity() === false || acceptTerms === false) {\n        for (var i = 0; i < formLength; i += 1) {\n          var elem = _this.formEl[i];\n          var errorLabel = document.getElementById(\"\".concat(elem.name, \"Err\"));\n\n          if (errorLabel && elem.nodeName.toLowerCase() !== \"button\") {\n            if (!elem.validity.valid) {\n              if (elem.validity.valueMissing) {\n                errorLabel.textContent = texts.requiredErr;\n              } else if (elem.validity.tooShort) {\n                errorLabel.textContent = texts.tooShortErr;\n              }\n            } else {\n              errorLabel.textContent = \"\";\n            }\n          }\n        }\n\n        return false;\n      }\n\n      for (var _i = 0; _i < formLength; _i += 1) {\n        var _elem = _this.formEl[_i];\n\n        var _errorLabel = document.getElementById(\"\".concat(_elem.name, \"Err\"));\n\n        if (_errorLabel && _elem.nodeName.toLowerCase() !== \"button\") {\n          _errorLabel.textContent = \"\";\n        }\n      }\n\n      return true;\n    };\n\n    return _this;\n  }\n\n  _createClass(ChangePasswordScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var match = this.props.match;\n      var token = match.params.token;\n      axios.get(\"/api/users/changepassword\", {\n        headers: {\n          Authorization: token\n        }\n      }).then(function (response) {\n        var profile = response.data;\n\n        _this2.setState({\n          profile: profile,\n          fetchedProfile: true\n        });\n      }).catch(function (error) {\n        Log.error(error);\n\n        _this2.setState({\n          fetchedProfile: true,\n          error: true\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state2 = this.state,\n          formIsValidated = _this$state2.formIsValidated,\n          password = _this$state2.password,\n          passwordConfirm = _this$state2.passwordConfirm,\n          error = _this$state2.error,\n          profile = _this$state2.profile,\n          fetchedProfile = _this$state2.fetchedProfile,\n          errorMessage = _this$state2.errorMessage;\n      var language = this.props.language;\n      var formClass = [];\n\n      if (formIsValidated) {\n        formClass.push(\"was-validated\");\n      }\n\n      var texts = Texts[language].changePasswordScreen;\n\n      if (fetchedProfile) {\n        if (!error) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            id: \"changePasswordContainer\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(\"img\", {\n            className: \"horizontalCenter\",\n            src: path(profile, [\"image\", \"path\"]),\n            alt: \"user logo\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 13\n            }\n          }), /*#__PURE__*/React.createElement(\"h1\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 13\n            }\n          }, texts.prompt), /*#__PURE__*/React.createElement(\"form\", {\n            ref: function ref(form) {\n              _this3.formEl = form;\n            },\n            className: formClass,\n            noValidate: true,\n            onSubmit: this.handleSubmit,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"input\", {\n            placeholder: texts.password,\n            type: \"password\",\n            name: \"password\",\n            className: \"form-control\",\n            onChange: this.handleChange,\n            required: true,\n            minLength: 8,\n            value: password,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }\n          }), /*#__PURE__*/React.createElement(\"span\", {\n            className: \"invalid-feedback\",\n            id: \"passwordErr\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 15\n            }\n          }), /*#__PURE__*/React.createElement(\"input\", {\n            placeholder: texts.confirm,\n            type: \"password\",\n            name: \"passwordConfirm\",\n            className: \"form-control\",\n            onChange: this.handleChange,\n            id: \"passwordConfirm\",\n            minLength: 8,\n            required: true,\n            value: passwordConfirm,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 15\n            }\n          }), /*#__PURE__*/React.createElement(\"span\", {\n            className: \"invalid-feedback\",\n            id: \"passwordConfirmErr\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 15\n            }\n          }), /*#__PURE__*/React.createElement(\"button\", {\n            type: \"button\",\n            onClick: this.handleSubmit,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 15\n            }\n          }, texts.change)), /*#__PURE__*/React.createElement(\"span\", {\n            className: \"invalid-feedback center\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 13\n            }\n          }, error ? errorMessage : \"\"));\n        }\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          id: \"badRequestContainer\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"h1\", {\n          className: \"verticalCenter\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 11\n          }\n        }, texts.badRequest));\n      }\n\n      return /*#__PURE__*/React.createElement(LoadingSpinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n\n  return ChangePasswordScreen;\n}(React.Component);\n\nChangePasswordScreen.propTypes = {\n  language: PropTypes.string,\n  match: PropTypes.object,\n  history: PropTypes.object\n};\nexport default withLanguage(ChangePasswordScreen);","map":{"version":3,"sources":["C:/Users/nucle/Documents/GitHub/Green-Wizards/client/src/components/ChangePasswordScreen.js"],"names":["React","axios","PropTypes","path","Texts","withLanguage","LoadingSpinner","Log","ChangePasswordScreen","state","password","passwordConfirm","formIsValidated","fetchedProfile","error","handleChange","event","target","name","value","language","props","setCustomValidity","changePasswordScreen","err","document","getElementById","setState","handleSubmit","match","history","token","params","preventDefault","validate","post","headers","Authorization","then","response","user","data","localStorage","setItem","JSON","stringify","replace","catch","push","acceptTerms","texts","formLength","formEl","length","checkValidity","i","elem","errorLabel","nodeName","toLowerCase","validity","valid","valueMissing","textContent","requiredErr","tooShort","tooShortErr","get","profile","errorMessage","formClass","prompt","form","confirm","change","badRequest","Component","propTypes","string","object"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as path from \"lodash.get\";\r\nimport Texts from \"../Constants/Texts\";\r\nimport withLanguage from \"./LanguageContext\";\r\nimport LoadingSpinner from \"./LoadingSpinner\";\r\nimport Log from \"./Log\";\r\n\r\nclass ChangePasswordScreen extends React.Component {\r\n  state = {\r\n    password: \"\",\r\n    passwordConfirm: \"\",\r\n    formIsValidated: false,\r\n    fetchedProfile: false,\r\n    error: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { match } = this.props;\r\n    const { token } = match.params;\r\n    axios\r\n      .get(\"/api/users/changepassword\", {\r\n        headers: {\r\n          Authorization: token\r\n        }\r\n      })\r\n      .then(response => {\r\n        const profile = response.data;\r\n        this.setState({ profile, fetchedProfile: true });\r\n      })\r\n      .catch(error => {\r\n        Log.error(error);\r\n        this.setState({ fetchedProfile: true, error: true });\r\n      });\r\n  }\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.target;\r\n    const { language } = this.props;\r\n    const { password, passwordConfirm } = this.state;\r\n    if (name === \"passwordConfirm\") {\r\n      if (password !== value) {\r\n        event.target.setCustomValidity(\r\n          Texts[language].changePasswordScreen.err\r\n        );\r\n      } else {\r\n        event.target.setCustomValidity(\"\");\r\n      }\r\n    }\r\n    if (name === \"password\") {\r\n      if (passwordConfirm !== value) {\r\n        document\r\n          .getElementById(\"passwordConfirm\")\r\n          .setCustomValidity(Texts[language].changePasswordScreen.error);\r\n      } else {\r\n        document.getElementById(\"passwordConfirm\").setCustomValidity(\"\");\r\n      }\r\n    }\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    const { match, history } = this.props;\r\n    const { token } = match.params;\r\n    const { password } = this.state;\r\n    event.preventDefault();\r\n    if (this.validate()) {\r\n      axios\r\n        .post(\r\n          \"/api/users/changepassword\",\r\n          {\r\n            password\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: token\r\n            }\r\n          }\r\n        )\r\n        .then(response => {\r\n          const user = response.data;\r\n          localStorage.setItem(\"user\", JSON.stringify(user));\r\n          history.replace(\"/myfamiliesshare\");\r\n        })\r\n        .catch(error => {\r\n          Log.error(error);\r\n          history.push(\"/\");\r\n        });\r\n    }\r\n    this.setState({ formIsValidated: true });\r\n  };\r\n\r\n  validate = () => {\r\n    const { language } = this.props;\r\n    const { acceptTerms } = this.state;\r\n    const texts = Texts[language];\r\n    const formLength = this.formEl.length;\r\n    if (this.formEl.checkValidity() === false || acceptTerms === false) {\r\n      for (let i = 0; i < formLength; i += 1) {\r\n        const elem = this.formEl[i];\r\n        const errorLabel = document.getElementById(`${elem.name}Err`);\r\n        if (errorLabel && elem.nodeName.toLowerCase() !== \"button\") {\r\n          if (!elem.validity.valid) {\r\n            if (elem.validity.valueMissing) {\r\n              errorLabel.textContent = texts.requiredErr;\r\n            } else if (elem.validity.tooShort) {\r\n              errorLabel.textContent = texts.tooShortErr;\r\n            }\r\n          } else {\r\n            errorLabel.textContent = \"\";\r\n          }\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n    for (let i = 0; i < formLength; i += 1) {\r\n      const elem = this.formEl[i];\r\n      const errorLabel = document.getElementById(`${elem.name}Err`);\r\n      if (errorLabel && elem.nodeName.toLowerCase() !== \"button\") {\r\n        errorLabel.textContent = \"\";\r\n      }\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      formIsValidated,\r\n      password,\r\n      passwordConfirm,\r\n      error,\r\n      profile,\r\n      fetchedProfile,\r\n      errorMessage\r\n    } = this.state;\r\n    const { language } = this.props;\r\n    const formClass = [];\r\n    if (formIsValidated) {\r\n      formClass.push(\"was-validated\");\r\n    }\r\n    const texts = Texts[language].changePasswordScreen;\r\n    if (fetchedProfile) {\r\n      if (!error) {\r\n        return (\r\n          <div id=\"changePasswordContainer\">\r\n            <img\r\n              className=\"horizontalCenter\"\r\n              src={path(profile, [\"image\", \"path\"])}\r\n              alt=\"user logo\"\r\n            />\r\n            <h1>{texts.prompt}</h1>\r\n            <form\r\n              ref={form => {\r\n                this.formEl = form;\r\n              }}\r\n              className={formClass}\r\n              noValidate\r\n              onSubmit={this.handleSubmit}\r\n            >\r\n              <input\r\n                placeholder={texts.password}\r\n                type=\"password\"\r\n                name=\"password\"\r\n                className=\"form-control\"\r\n                onChange={this.handleChange}\r\n                required\r\n                minLength={8}\r\n                value={password}\r\n              />\r\n              <span className=\"invalid-feedback\" id=\"passwordErr\" />\r\n              <input\r\n                placeholder={texts.confirm}\r\n                type=\"password\"\r\n                name=\"passwordConfirm\"\r\n                className=\"form-control\"\r\n                onChange={this.handleChange}\r\n                id=\"passwordConfirm\"\r\n                minLength={8}\r\n                required\r\n                value={passwordConfirm}\r\n              />\r\n              <span className=\"invalid-feedback\" id=\"passwordConfirmErr\" />\r\n              <button type=\"button\" onClick={this.handleSubmit}>\r\n                {texts.change}\r\n              </button>\r\n            </form>\r\n            <span className=\"invalid-feedback center\">\r\n              {error ? errorMessage : \"\"}\r\n            </span>\r\n          </div>\r\n        );\r\n      }\r\n      return (\r\n        <div id=\"badRequestContainer\">\r\n          <h1 className=\"verticalCenter\">{texts.badRequest}</h1>\r\n        </div>\r\n      );\r\n    }\r\n    return <LoadingSpinner />;\r\n  }\r\n}\r\n\r\nChangePasswordScreen.propTypes = {\r\n  language: PropTypes.string,\r\n  match: PropTypes.object,\r\n  history: PropTypes.object\r\n};\r\n\r\nexport default withLanguage(ChangePasswordScreen);\r\n"]},"metadata":{},"sourceType":"module"}