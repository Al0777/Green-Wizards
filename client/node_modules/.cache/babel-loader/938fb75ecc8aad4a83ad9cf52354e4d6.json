{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Families_Share-platform\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Families_Share-platform\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Families_Share-platform\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Families_Share-platform\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Families_Share-platform\\\\client\\\\src\\\\components\\\\LogInScreen.js\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { GoogleLogin } from \"react-google-login\";\nimport { withSnackbar } from \"notistack\";\nimport LogInForm from \"./LogInForm\";\nimport BackNavigation from \"./BackNavigation\";\nimport Texts from \"../Constants/Texts\";\nimport withLanguage from \"./LanguageContext\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport authenticationActions from \"../Actions/AuthenticationActions\";\n\nvar LogInScreen = /*#__PURE__*/function (_React$Component) {\n  _inherits(LogInScreen, _React$Component);\n\n  var _super = _createSuper(LogInScreen);\n\n  function LogInScreen() {\n    var _this;\n\n    _classCallCheck(this, LogInScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.handleMessage = function (event) {\n      var _this$props = _this.props,\n          dispatch = _this$props.dispatch,\n          history = _this$props.history;\n      var data = JSON.parse(event.data);\n\n      if (data.action === \"googleLogin\") {\n        dispatch(authenticationActions.googleLogin(data.response, history, \"native\", localStorage.getItem(\"deviceToken\")));\n      }\n    };\n\n    _this.handleTermsAndPolicy = function () {\n      var message = {\n        action: \"termsAndPolicy\"\n      };\n\n      if (window.isNative) {\n        window.ReactNativeWebView.postMessage(JSON.stringify(message));\n      } else {\n        window.location.replace(process.env.REACT_APP_TERMS_AND_POLICY);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(LogInScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener(\"message\", this.handleMessage, false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener(\"message\", this.handleMessage, false);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          loggingIn = _this$props2.loggingIn,\n          language = _this$props2.language,\n          history = _this$props2.history,\n          dispatch = _this$props2.dispatch,\n          enqueueSnackbar = _this$props2.enqueueSnackbar;\n      var texts = Texts[language].logInScreen;\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 7\n        }\n      }, loggingIn ? /*#__PURE__*/React.createElement(LoadingSpinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 22\n        }\n      }) : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 43\n        }\n      }), /*#__PURE__*/React.createElement(BackNavigation, {\n        title: texts.backNavTitle,\n        onClick: function onClick() {\n          return history.goBack();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        id: \"logInContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(LogInForm, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row no-gutters\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        role: \"button\",\n        tabIndex: -42,\n        onClick: function onClick() {\n          return history.push(\"/forgotpsw\");\n        },\n        className: \"horizontalCenter forgotPasswordButton\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }\n      }, texts.forgotPassword)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row no-gutters\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        className: \"orLogInText horizontalCenter\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }\n      }, texts.orLogInWith)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row no-gutters\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(GoogleLogin, {\n        clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n        render: function render(renderProps) {\n          return /*#__PURE__*/React.createElement(\"button\", {\n            type: \"button\",\n            onClick: function onClick() {\n              return window.isNative ? window.ReactNativeWebView.postMessage(JSON.stringify({\n                action: \"googleLogin\"\n              })) : renderProps.onClick();\n            },\n            className: \"logInButton googleColor horizontalCenter\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 17\n            }\n          }, texts.google);\n        },\n        buttonText: \"Login\",\n        onSuccess: function onSuccess(response) {\n          return dispatch(authenticationActions.googleLogin(response, history, \"web\", localStorage.getItem(\"deviceToken\")));\n        },\n        onFailure: function onFailure(response) {\n          enqueueSnackbar(response.error, {\n            variant: \"error\"\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"agreeWithTermsGoogle\",\n        role: \"button\",\n        tabIndex: -42,\n        onClick: this.handleTermsAndPolicy,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }\n      }, texts.agreeWithTerms), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row no-gutters\",\n        style: {\n          marginTop: \"3rem\",\n          marginBottom: \"6rem\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"horizontalCenter\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"dontHaveAccountText\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }\n      }, texts.dontHaveAccount), /*#__PURE__*/React.createElement(Link, {\n        to: \"/signup\",\n        className: \"signUpButton\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }\n      }, texts.signUp))));\n    }\n  }]);\n\n  return LogInScreen;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  var loggingIn = state.authentication.loggingIn;\n  return {\n    loggingIn: loggingIn\n  };\n}\n\nexport default connect(mapStateToProps)(withSnackbar(withLanguage(LogInScreen)));\nLogInScreen.propTypes = {\n  language: PropTypes.string,\n  history: PropTypes.object,\n  dispatch: PropTypes.func,\n  enqueueSnackbar: PropTypes.func,\n  loggingIn: PropTypes.bool\n};","map":{"version":3,"sources":["C:/Users/nucle/Documents/GitHub/Families_Share-platform/client/src/components/LogInScreen.js"],"names":["React","Link","PropTypes","connect","GoogleLogin","withSnackbar","LogInForm","BackNavigation","Texts","withLanguage","LoadingSpinner","authenticationActions","LogInScreen","handleMessage","event","props","dispatch","history","data","JSON","parse","action","googleLogin","response","localStorage","getItem","handleTermsAndPolicy","message","window","isNative","ReactNativeWebView","postMessage","stringify","location","replace","process","env","REACT_APP_TERMS_AND_POLICY","document","addEventListener","removeEventListener","loggingIn","language","enqueueSnackbar","texts","logInScreen","backNavTitle","goBack","push","forgotPassword","orLogInWith","REACT_APP_GOOGLE_CLIENT_ID","renderProps","onClick","google","error","variant","agreeWithTerms","marginTop","marginBottom","dontHaveAccount","signUp","Component","mapStateToProps","state","authentication","propTypes","string","object","func","bool"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { GoogleLogin } from \"react-google-login\";\r\nimport { withSnackbar } from \"notistack\";\r\nimport LogInForm from \"./LogInForm\";\r\nimport BackNavigation from \"./BackNavigation\";\r\nimport Texts from \"../Constants/Texts\";\r\nimport withLanguage from \"./LanguageContext\";\r\nimport LoadingSpinner from \"./LoadingSpinner\";\r\nimport authenticationActions from \"../Actions/AuthenticationActions\";\r\n\r\nclass LogInScreen extends React.Component {\r\n  componentDidMount() {\r\n    document.addEventListener(\"message\", this.handleMessage, false);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"message\", this.handleMessage, false);\r\n  }\r\n\r\n  handleMessage = event => {\r\n    const { dispatch, history } = this.props;\r\n    const data = JSON.parse(event.data);\r\n    if (data.action === \"googleLogin\") {\r\n      dispatch(\r\n        authenticationActions.googleLogin(\r\n          data.response,\r\n          history,\r\n          \"native\",\r\n          localStorage.getItem(\"deviceToken\")\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  handleTermsAndPolicy = () => {\r\n    const message = {\r\n      action: \"termsAndPolicy\"\r\n    };\r\n    if (window.isNative) {\r\n      window.ReactNativeWebView.postMessage(JSON.stringify(message));\r\n    } else {\r\n      window.location.replace(process.env.REACT_APP_TERMS_AND_POLICY);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      loggingIn,\r\n      language,\r\n      history,\r\n      dispatch,\r\n      enqueueSnackbar\r\n    } = this.props;\r\n    const texts = Texts[language].logInScreen;\r\n    return (\r\n      <React.Fragment>\r\n        {loggingIn ? <LoadingSpinner /> : <div />}\r\n        <BackNavigation\r\n          title={texts.backNavTitle}\r\n          onClick={() => history.goBack()}\r\n        />\r\n        <div id=\"logInContainer\">\r\n          <LogInForm />\r\n          <div className=\"row no-gutters\">\r\n            <div\r\n              role=\"button\"\r\n              tabIndex={-42}\r\n              onClick={() => history.push(\"/forgotpsw\")}\r\n              className=\"horizontalCenter forgotPasswordButton\"\r\n            >\r\n              {texts.forgotPassword}\r\n            </div>\r\n          </div>\r\n          <div className=\"row no-gutters\">\r\n            <h1 className=\"orLogInText horizontalCenter\">\r\n              {texts.orLogInWith}\r\n            </h1>\r\n          </div>\r\n          <div className=\"row no-gutters\">\r\n            <GoogleLogin\r\n              clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\r\n              render={renderProps => (\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() =>\r\n                    window.isNative\r\n                      ? window.ReactNativeWebView.postMessage(\r\n                          JSON.stringify({ action: \"googleLogin\" })\r\n                        )\r\n                      : renderProps.onClick()\r\n                  }\r\n                  className=\"logInButton googleColor horizontalCenter\"\r\n                >\r\n                  {texts.google}\r\n                </button>\r\n              )}\r\n              buttonText=\"Login\"\r\n              onSuccess={response =>\r\n                dispatch(\r\n                  authenticationActions.googleLogin(\r\n                    response,\r\n                    history,\r\n                    \"web\",\r\n                    localStorage.getItem(\"deviceToken\")\r\n                  )\r\n                )\r\n              }\r\n              onFailure={response => {\r\n                enqueueSnackbar(response.error, {\r\n                  variant: \"error\"\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"agreeWithTermsGoogle\"\r\n          role=\"button\"\r\n          tabIndex={-42}\r\n          onClick={this.handleTermsAndPolicy}\r\n        >\r\n          {texts.agreeWithTerms}\r\n        </div>\r\n        <div\r\n          className=\"row no-gutters\"\r\n          style={{ marginTop: \"3rem\", marginBottom: \"6rem\" }}\r\n        >\r\n          <div className=\"horizontalCenter\">\r\n            <p className=\"dontHaveAccountText\">{texts.dontHaveAccount}</p>\r\n            <Link to=\"/signup\" className=\"signUpButton\">\r\n              {texts.signUp}\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const { loggingIn } = state.authentication;\r\n  return {\r\n    loggingIn\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(\r\n  withSnackbar(withLanguage(LogInScreen))\r\n);\r\n\r\nLogInScreen.propTypes = {\r\n  language: PropTypes.string,\r\n  history: PropTypes.object,\r\n  dispatch: PropTypes.func,\r\n  enqueueSnackbar: PropTypes.func,\r\n  loggingIn: PropTypes.bool\r\n};\r\n"]},"metadata":{},"sourceType":"module"}