{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\src\\\\components\\\\GroupInfo.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport PropTypes from \"prop-types\";\nimport * as path from \"lodash.get\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { withSnackbar } from \"notistack\";\nimport GroupAbout from \"./GroupAbout\";\nimport GroupHeader from \"./GroupHeader\";\nimport Card from \"./CardWithLink\";\nimport withLanguage from \"./LanguageContext\";\nimport Texts from \"../Constants/Texts\";\nimport ConfirmDialog from \"./ConfirmDialog\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport Log from \"./Log\";\n\nvar GroupInfo = /*#__PURE__*/function (_React$Component) {\n  _inherits(GroupInfo, _React$Component);\n\n  var _super = _createSuper(GroupInfo);\n\n  function GroupInfo(props) {\n    var _this;\n\n    _classCallCheck(this, GroupInfo);\n\n    _this = _super.call(this, props);\n\n    _this.handleAcceptInvite = function () {\n      var group = _this.state.group;\n      var groupId = group.group_id;\n      var enableNavigation = _this.props.enableNavigation;\n      var userId = JSON.parse(localStorage.getItem(\"user\")).id;\n      axios.patch(\"/api/users/\".concat(userId, \"/groups/\").concat(groupId), {\n        patch: {\n          user_accepted: true\n        }\n      }).then(function (response) {\n        Log.info(response);\n\n        _this.setState({\n          userAccepted: true\n        });\n\n        enableNavigation();\n      }).catch(function (error) {\n        Log.error(error);\n      });\n    };\n\n    _this.handleJoin = function () {\n      var group = _this.state.group;\n      var group_id = group.group_id;\n      var userId = JSON.parse(localStorage.getItem(\"user\")).id;\n      axios.post(\"/api/users/\".concat(userId, \"/groups\"), {\n        group_id: group_id\n      }).then(function (response) {\n        Log.info(response);\n\n        _this.setState({\n          userAccepted: true\n        });\n      }).catch(function (error) {\n        Log.error(error);\n      });\n    };\n\n    _this.handleLeave = function () {\n      var group = _this.state.group;\n      var groupId = group.group_id;\n      var history = _this.props.history;\n      var userId = JSON.parse(localStorage.getItem(\"user\")).id;\n      axios.delete(\"/api/users/\".concat(userId, \"/groups/\").concat(groupId)).then(function (response) {\n        Log.info(response);\n        history.replace(\"/myfamiliesshare\");\n      }).catch(function (error) {\n        Log.error(error);\n      });\n    };\n\n    _this.handleCancel = function () {\n      var group = _this.state.group;\n      var groupId = group.group_id;\n      var userId = JSON.parse(localStorage.getItem(\"user\")).id;\n      axios.delete(\"/api/users/\".concat(userId, \"/groups/\").concat(groupId)).then(function (response) {\n        Log.info(response);\n\n        _this.setState({\n          userAccepted: false\n        });\n      }).catch(function (error) {\n        Log.error(error);\n      });\n    };\n\n    _this.handleConfirmClose = function (choice) {\n      if (choice === \"agree\") {\n        _this.handleLeave();\n      }\n\n      _this.setState({\n        confirmIsOpen: false\n      });\n    };\n\n    _this.handleContact = function () {\n      var _this$props = _this.props,\n          language = _this$props.language,\n          enqueueSnackbar = _this$props.enqueueSnackbar;\n      var texts = Texts[language].groupInfo;\n      var _this$state$group = _this.state.group,\n          contactType = _this$state$group.contact_type,\n          contactInfo = _this$state$group.contact_info;\n\n      if (window.isNative) {\n        if (contactType === \"phone\") {\n          window.ReactNativeWebView.postMessage(JSON.stringify({\n            action: \"phoneCall\",\n            value: contactInfo\n          }));\n        } else {\n          window.ReactNativeWebView.postMessage(JSON.stringify({\n            action: \"sendEmail\",\n            value: contactInfo\n          }));\n        }\n      } else {\n        enqueueSnackbar(texts.contactMessage, {\n          variant: \"info\"\n        });\n      }\n    };\n\n    _this.renderJoinButton = function () {\n      var language = _this.props.language;\n      var _this$state = _this.state,\n          groupAccepted = _this$state.groupAccepted,\n          userAccepted = _this$state.userAccepted,\n          group = _this$state.group;\n      var groupIsOpen = group.settings.open;\n      var texts = Texts[language].groupInfo;\n      var disabled = false;\n      var text;\n      var handleFunc;\n\n      if (userAccepted) {\n        if (groupAccepted) {\n          text = texts.leave;\n\n          handleFunc = function handleFunc() {\n            _this.setState({\n              confirmIsOpen: true\n            });\n          };\n        } else {\n          text = texts.pending;\n          handleFunc = _this.handleCancel;\n        }\n      } else if (groupAccepted) {\n        text = texts.join;\n        handleFunc = _this.handleAcceptInvite;\n      } else if (groupIsOpen) {\n        text = texts.join;\n        handleFunc = _this.handleJoin;\n      } else {\n        disabled = true;\n      }\n\n      return !disabled ? /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        onClick: handleFunc,\n        className: \"joinGroupButton\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 7\n        }\n      }, text) : null;\n    };\n\n    var _group = _this.props.group;\n    _this.state = {\n      group: _group,\n      fetchedGroupInfo: false\n    };\n    return _this;\n  }\n\n  _createClass(GroupInfo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var group = this.state.group;\n      var groupId = group.group_id;\n      axios.get(\"/api/groups/\".concat(groupId, \"/settings\")).then(function (response) {\n        group.settings = response.data;\n        var groupAccepted = false;\n        var userAccepted = false;\n        var userIsAdmin = false;\n        var userId = JSON.parse(localStorage.getItem(\"user\")).id;\n        group.members.forEach(function (member) {\n          if (member.user_id === userId) {\n            var group_accepted = member.group_accepted,\n                user_accepted = member.user_accepted,\n                admin = member.admin;\n            groupAccepted = group_accepted;\n            userAccepted = user_accepted;\n            userIsAdmin = admin;\n          }\n        });\n\n        _this2.setState({\n          groupAccepted: groupAccepted,\n          userAccepted: userAccepted,\n          userIsAdmin: userIsAdmin,\n          confirmIsOpen: false,\n          fetchedGroupInfo: true,\n          group: group\n        });\n      }).catch(function (error) {\n        Log.error(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          language = _this$props2.language,\n          match = _this$props2.match;\n      var _this$state2 = this.state,\n          fetchedGroupInfo = _this$state2.fetchedGroupInfo,\n          group = _this$state2.group,\n          userIsAdmin = _this$state2.userIsAdmin,\n          groupAccepted = _this$state2.groupAccepted,\n          userAccepted = _this$state2.userAccepted,\n          confirmIsOpen = _this$state2.confirmIsOpen;\n      var groupName = group.name,\n          groupId = group.group_id,\n          groupBackground = group.background,\n          groupInfo = group.description,\n          contactInfo = group.contact_info;\n      var texts = Texts[language].groupInfo;\n      return fetchedGroupInfo ? /*#__PURE__*/React.createElement(\"div\", {\n        id: \"groupInfoContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(GroupHeader, {\n        groupName: groupName,\n        groupId: groupId,\n        groupLogo: path(group, [\"image\", \"path\"]),\n        groupBackground: groupBackground,\n        userIsAdmin: userIsAdmin,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        id: \"groupInfoMainContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(GroupAbout, {\n        groupInfo: groupInfo,\n        hasJoined: groupAccepted && userAccepted,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }\n      }), userAccepted && groupAccepted && /*#__PURE__*/React.createElement(Card, {\n        card: {\n          cardHeader: texts.startGuideHeader,\n          cardInfo: texts.startGuideInfo,\n          learnMore: true,\n          link: \"\".concat(match.url, \"/start-up-guide\")\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }\n      }), !(userAccepted && groupAccepted) && /*#__PURE__*/React.createElement(CopyToClipboard, {\n        text: contactInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.handleContact,\n        className: \"joinGroupButton\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 15\n        }\n      }, texts.contact)), this.renderJoinButton(), /*#__PURE__*/React.createElement(ConfirmDialog, {\n        isOpen: confirmIsOpen,\n        title: texts.confirm,\n        handleClose: this.handleConfirmClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }\n      }))) : /*#__PURE__*/React.createElement(LoadingSpinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return GroupInfo;\n}(React.Component);\n\nexport default withSnackbar(withLanguage(GroupInfo));\nGroupInfo.propTypes = {\n  enableNavigation: PropTypes.func,\n  group: PropTypes.object,\n  language: PropTypes.string,\n  history: PropTypes.object,\n  match: PropTypes.object,\n  enqueueSnackbar: PropTypes.func\n};","map":{"version":3,"sources":["C:/Users/nucle/Documents/GitHub/Green-Wizards/client/src/components/GroupInfo.js"],"names":["React","axios","PropTypes","path","CopyToClipboard","withSnackbar","GroupAbout","GroupHeader","Card","withLanguage","Texts","ConfirmDialog","LoadingSpinner","Log","GroupInfo","props","handleAcceptInvite","group","state","groupId","group_id","enableNavigation","userId","JSON","parse","localStorage","getItem","id","patch","user_accepted","then","response","info","setState","userAccepted","catch","error","handleJoin","post","handleLeave","history","delete","replace","handleCancel","handleConfirmClose","choice","confirmIsOpen","handleContact","language","enqueueSnackbar","texts","groupInfo","contactType","contact_type","contactInfo","contact_info","window","isNative","ReactNativeWebView","postMessage","stringify","action","value","contactMessage","variant","renderJoinButton","groupAccepted","groupIsOpen","settings","open","disabled","text","handleFunc","leave","pending","join","fetchedGroupInfo","get","data","userIsAdmin","members","forEach","member","user_id","group_accepted","admin","match","groupName","name","groupBackground","background","description","cardHeader","startGuideHeader","cardInfo","startGuideInfo","learnMore","link","url","contact","confirm","Component","propTypes","func","object","string"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as path from \"lodash.get\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport { withSnackbar } from \"notistack\";\r\nimport GroupAbout from \"./GroupAbout\";\r\nimport GroupHeader from \"./GroupHeader\";\r\nimport Card from \"./CardWithLink\";\r\nimport withLanguage from \"./LanguageContext\";\r\nimport Texts from \"../Constants/Texts\";\r\nimport ConfirmDialog from \"./ConfirmDialog\";\r\nimport LoadingSpinner from \"./LoadingSpinner\";\r\nimport Log from \"./Log\";\r\n\r\nclass GroupInfo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { group } = this.props;\r\n    this.state = { group, fetchedGroupInfo: false };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { group } = this.state;\r\n    const { group_id: groupId } = group;\r\n    axios\r\n      .get(`/api/groups/${groupId}/settings`)\r\n      .then(response => {\r\n        group.settings = response.data;\r\n        let groupAccepted = false;\r\n        let userAccepted = false;\r\n        let userIsAdmin = false;\r\n        const userId = JSON.parse(localStorage.getItem(\"user\")).id;\r\n        group.members.forEach(member => {\r\n          if (member.user_id === userId) {\r\n            const { group_accepted, user_accepted, admin } = member;\r\n            groupAccepted = group_accepted;\r\n            userAccepted = user_accepted;\r\n            userIsAdmin = admin;\r\n          }\r\n        });\r\n        this.setState({\r\n          groupAccepted,\r\n          userAccepted,\r\n          userIsAdmin,\r\n          confirmIsOpen: false,\r\n          fetchedGroupInfo: true,\r\n          group\r\n        });\r\n      })\r\n      .catch(error => {\r\n        Log.error(error);\r\n      });\r\n  }\r\n\r\n  handleAcceptInvite = () => {\r\n    const { group } = this.state;\r\n    const { group_id: groupId } = group;\r\n    const { enableNavigation } = this.props;\r\n    const userId = JSON.parse(localStorage.getItem(\"user\")).id;\r\n    axios\r\n      .patch(`/api/users/${userId}/groups/${groupId}`, {\r\n        patch: { user_accepted: true }\r\n      })\r\n      .then(response => {\r\n        Log.info(response);\r\n        this.setState({ userAccepted: true });\r\n        enableNavigation();\r\n      })\r\n      .catch(error => {\r\n        Log.error(error);\r\n      });\r\n  };\r\n\r\n  handleJoin = () => {\r\n    const { group } = this.state;\r\n    const { group_id } = group;\r\n    const userId = JSON.parse(localStorage.getItem(\"user\")).id;\r\n    axios\r\n      .post(`/api/users/${userId}/groups`, {\r\n        group_id\r\n      })\r\n      .then(response => {\r\n        Log.info(response);\r\n        this.setState({ userAccepted: true });\r\n      })\r\n      .catch(error => {\r\n        Log.error(error);\r\n      });\r\n  };\r\n\r\n  handleLeave = () => {\r\n    const { group } = this.state;\r\n    const { group_id: groupId } = group;\r\n    const { history } = this.props;\r\n    const userId = JSON.parse(localStorage.getItem(\"user\")).id;\r\n    axios\r\n      .delete(`/api/users/${userId}/groups/${groupId}`)\r\n      .then(response => {\r\n        Log.info(response);\r\n        history.replace(\"/myfamiliesshare\");\r\n      })\r\n      .catch(error => {\r\n        Log.error(error);\r\n      });\r\n  };\r\n\r\n  handleCancel = () => {\r\n    const { group } = this.state;\r\n    const { group_id: groupId } = group;\r\n    const userId = JSON.parse(localStorage.getItem(\"user\")).id;\r\n    axios\r\n      .delete(`/api/users/${userId}/groups/${groupId}`)\r\n      .then(response => {\r\n        Log.info(response);\r\n        this.setState({ userAccepted: false });\r\n      })\r\n      .catch(error => {\r\n        Log.error(error);\r\n      });\r\n  };\r\n\r\n  handleConfirmClose = choice => {\r\n    if (choice === \"agree\") {\r\n      this.handleLeave();\r\n    }\r\n    this.setState({ confirmIsOpen: false });\r\n  };\r\n\r\n  handleContact = () => {\r\n    const { language, enqueueSnackbar } = this.props;\r\n    const texts = Texts[language].groupInfo;\r\n    const {\r\n      group: { contact_type: contactType, contact_info: contactInfo }\r\n    } = this.state;\r\n    if (window.isNative) {\r\n      if (contactType === \"phone\") {\r\n        window.ReactNativeWebView.postMessage(\r\n          JSON.stringify({ action: \"phoneCall\", value: contactInfo })\r\n        );\r\n      } else {\r\n        window.ReactNativeWebView.postMessage(\r\n          JSON.stringify({ action: \"sendEmail\", value: contactInfo })\r\n        );\r\n      }\r\n    } else {\r\n      enqueueSnackbar(texts.contactMessage, {\r\n        variant: \"info\"\r\n      });\r\n    }\r\n  };\r\n\r\n  renderJoinButton = () => {\r\n    const { language } = this.props;\r\n    const { groupAccepted, userAccepted, group } = this.state;\r\n    const { open: groupIsOpen } = group.settings;\r\n    const texts = Texts[language].groupInfo;\r\n    let disabled = false;\r\n    let text;\r\n    let handleFunc;\r\n    if (userAccepted) {\r\n      if (groupAccepted) {\r\n        text = texts.leave;\r\n        handleFunc = () => {\r\n          this.setState({ confirmIsOpen: true });\r\n        };\r\n      } else {\r\n        text = texts.pending;\r\n        handleFunc = this.handleCancel;\r\n      }\r\n    } else if (groupAccepted) {\r\n      text = texts.join;\r\n      handleFunc = this.handleAcceptInvite;\r\n    } else if (groupIsOpen) {\r\n      text = texts.join;\r\n      handleFunc = this.handleJoin;\r\n    } else {\r\n      disabled = true;\r\n    }\r\n    return !disabled ? (\r\n      <button type=\"button\" onClick={handleFunc} className=\"joinGroupButton\">\r\n        {text}\r\n      </button>\r\n    ) : null;\r\n  };\r\n\r\n  render() {\r\n    const { language, match } = this.props;\r\n    const {\r\n      fetchedGroupInfo,\r\n      group,\r\n      userIsAdmin,\r\n      groupAccepted,\r\n      userAccepted,\r\n      confirmIsOpen\r\n    } = this.state;\r\n    const {\r\n      name: groupName,\r\n      group_id: groupId,\r\n      background: groupBackground,\r\n      description: groupInfo,\r\n      contact_info: contactInfo\r\n    } = group;\r\n    const texts = Texts[language].groupInfo;\r\n    return fetchedGroupInfo ? (\r\n      <div id=\"groupInfoContainer\">\r\n        <GroupHeader\r\n          groupName={groupName}\r\n          groupId={groupId}\r\n          groupLogo={path(group, [\"image\", \"path\"])}\r\n          groupBackground={groupBackground}\r\n          userIsAdmin={userIsAdmin}\r\n        />\r\n        <div id=\"groupInfoMainContainer\">\r\n          <GroupAbout\r\n            groupInfo={groupInfo}\r\n            hasJoined={groupAccepted && userAccepted}\r\n          />\r\n          {userAccepted && groupAccepted && (\r\n            <Card\r\n              card={{\r\n                cardHeader: texts.startGuideHeader,\r\n                cardInfo: texts.startGuideInfo,\r\n                learnMore: true,\r\n                link: `${match.url}/start-up-guide`\r\n              }}\r\n            />\r\n          )}\r\n          {!(userAccepted && groupAccepted) && (\r\n            <CopyToClipboard text={contactInfo}>\r\n              <button\r\n                type=\"button\"\r\n                onClick={this.handleContact}\r\n                className=\"joinGroupButton\"\r\n              >\r\n                {texts.contact}\r\n              </button>\r\n            </CopyToClipboard>\r\n          )}\r\n          {this.renderJoinButton()}\r\n          <ConfirmDialog\r\n            isOpen={confirmIsOpen}\r\n            title={texts.confirm}\r\n            handleClose={this.handleConfirmClose}\r\n          />\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <LoadingSpinner />\r\n    );\r\n  }\r\n}\r\nexport default withSnackbar(withLanguage(GroupInfo));\r\n\r\nGroupInfo.propTypes = {\r\n  enableNavigation: PropTypes.func,\r\n  group: PropTypes.object,\r\n  language: PropTypes.string,\r\n  history: PropTypes.object,\r\n  match: PropTypes.object,\r\n  enqueueSnackbar: PropTypes.func\r\n};\r\n"]},"metadata":{},"sourceType":"module"}