{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport debug from \"debug\";\nvar BASE = \"families-share\";\nvar COLOURS = {\n  trace: \"lightblue\",\n  info: \"blue\",\n  warn: \"pink\",\n  error: \"red\"\n}; // choose better colours :)\n\nvar Log = /*#__PURE__*/function () {\n  function Log() {\n    _classCallCheck(this, Log);\n\n    this.generateMessage = function (level, message, source) {\n      // Set the prefix which will cause debug to enable the message\n      var namespace = \"\".concat(BASE, \":\").concat(level);\n      var createDebug = debug(namespace); // Set the colour of the message based on the level\n\n      createDebug.color = COLOURS[level];\n\n      if (source) {\n        createDebug(source, message);\n      } else {\n        createDebug(message);\n      }\n    };\n  }\n\n  _createClass(Log, [{\n    key: \"trace\",\n    value: function trace(message, source) {\n      return this.generateMessage(\"trace\", message, source);\n    }\n  }, {\n    key: \"info\",\n    value: function info(message, source) {\n      return this.generateMessage(\"info\", message, source);\n    }\n  }, {\n    key: \"warn\",\n    value: function warn(message, source) {\n      return this.generateMessage(\"warn\", message, source);\n    }\n  }, {\n    key: \"error\",\n    value: function error(message, source) {\n      return this.generateMessage(\"error\", message, source);\n    }\n  }]);\n\n  return Log;\n}();\n\nexport default new Log();","map":{"version":3,"sources":["C:/Users/nucle/Documents/GitHub/Green-Wizards/client/src/components/Log.js"],"names":["debug","BASE","COLOURS","trace","info","warn","error","Log","generateMessage","level","message","source","namespace","createDebug","color"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,IAAI,GAAG,gBAAb;AACA,IAAMC,OAAO,GAAG;AACdC,EAAAA,KAAK,EAAE,WADO;AAEdC,EAAAA,IAAI,EAAE,MAFQ;AAGdC,EAAAA,IAAI,EAAE,MAHQ;AAIdC,EAAAA,KAAK,EAAE;AAJO,CAAhB,C,CAKG;;IAEGC,G;;;;SACJC,e,GAAkB,UAACC,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AAC5C;AACA,UAAMC,SAAS,aAAMX,IAAN,cAAcQ,KAAd,CAAf;AACA,UAAMI,WAAW,GAAGb,KAAK,CAACY,SAAD,CAAzB,CAH4C,CAK5C;;AACAC,MAAAA,WAAW,CAACC,KAAZ,GAAoBZ,OAAO,CAACO,KAAD,CAA3B;;AAEA,UAAIE,MAAJ,EAAY;AACVE,QAAAA,WAAW,CAACF,MAAD,EAASD,OAAT,CAAX;AACD,OAFD,MAEO;AACLG,QAAAA,WAAW,CAACH,OAAD,CAAX;AACD;AACF,K;;;;;0BAEKA,O,EAASC,M,EAAQ;AACrB,aAAO,KAAKH,eAAL,CAAqB,OAArB,EAA8BE,OAA9B,EAAuCC,MAAvC,CAAP;AACD;;;yBAEID,O,EAASC,M,EAAQ;AACpB,aAAO,KAAKH,eAAL,CAAqB,MAArB,EAA6BE,OAA7B,EAAsCC,MAAtC,CAAP;AACD;;;yBAEID,O,EAASC,M,EAAQ;AACpB,aAAO,KAAKH,eAAL,CAAqB,MAArB,EAA6BE,OAA7B,EAAsCC,MAAtC,CAAP;AACD;;;0BAEKD,O,EAASC,M,EAAQ;AACrB,aAAO,KAAKH,eAAL,CAAqB,OAArB,EAA8BE,OAA9B,EAAuCC,MAAvC,CAAP;AACD;;;;;;AAGH,eAAe,IAAIJ,GAAJ,EAAf","sourcesContent":["import debug from \"debug\";\r\n\r\nconst BASE = \"families-share\";\r\nconst COLOURS = {\r\n  trace: \"lightblue\",\r\n  info: \"blue\",\r\n  warn: \"pink\",\r\n  error: \"red\"\r\n}; // choose better colours :)\r\n\r\nclass Log {\r\n  generateMessage = (level, message, source) => {\r\n    // Set the prefix which will cause debug to enable the message\r\n    const namespace = `${BASE}:${level}`;\r\n    const createDebug = debug(namespace);\r\n\r\n    // Set the colour of the message based on the level\r\n    createDebug.color = COLOURS[level];\r\n\r\n    if (source) {\r\n      createDebug(source, message);\r\n    } else {\r\n      createDebug(message);\r\n    }\r\n  };\r\n\r\n  trace(message, source) {\r\n    return this.generateMessage(\"trace\", message, source);\r\n  }\r\n\r\n  info(message, source) {\r\n    return this.generateMessage(\"info\", message, source);\r\n  }\r\n\r\n  warn(message, source) {\r\n    return this.generateMessage(\"warn\", message, source);\r\n  }\r\n\r\n  error(message, source) {\r\n    return this.generateMessage(\"error\", message, source);\r\n  }\r\n}\r\n\r\nexport default new Log();\r\n"]},"metadata":{},"sourceType":"module"}