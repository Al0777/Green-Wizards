{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\nucle\\\\Documents\\\\GitHub\\\\Green-Wizards\\\\client\\\\src\\\\components\\\\TimeslotEmergencyScreen.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { withSnackbar } from \"notistack\";\nimport withLanguage from \"./LanguageContext\";\nimport Texts from \"../Constants/Texts\";\nimport BackNavigation from \"./BackNavigation\";\nimport EmegencyNunbers from \"../Constants/EmergencyNumbers\";\nimport ConfirmDialog from \"./ConfirmDialog\";\n\nvar TimeslotEmergencyScreen = /*#__PURE__*/function (_React$Component) {\n  _inherits(TimeslotEmergencyScreen, _React$Component);\n\n  var _super = _createSuper(TimeslotEmergencyScreen);\n\n  function TimeslotEmergencyScreen(props) {\n    var _this;\n\n    _classCallCheck(this, TimeslotEmergencyScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      confirmIsOpen: false\n    };\n\n    _this.handleConfirmClose = function (choice) {\n      var confirmService = _this.state.confirmService;\n\n      if (choice === \"agree\") {\n        window.ReactNativeWebView.postMessage(JSON.stringify({\n          action: \"phoneCall\",\n          value: _this.getServiceNumber(confirmService)\n        }));\n      }\n\n      _this.setState({\n        confirmIsOpen: false,\n        confirmService: \"\"\n      });\n    };\n\n    _this.handleEmergency = function (service) {\n      var _this$props = _this.props,\n          enqueueSnackbar = _this$props.enqueueSnackbar,\n          language = _this$props.language;\n      var texts = Texts[language].timeslotEmergencyScreen;\n\n      if (window.isNative) {\n        _this.setState({\n          confirmIsOpen: true,\n          confirmService: service\n        });\n      } else {\n        enqueueSnackbar(texts.copy, {\n          variant: \"info\"\n        });\n      }\n    };\n\n    _this.getServiceNumber = function (service) {\n      var citylab = process.env.REACT_APP_CITYLAB;\n      var numbers;\n\n      switch (citylab) {\n        case \"Bologna\":\n        case \"Venice\":\n        case \"Pescara\":\n        case \"Rome\":\n        case \"Foscari\":\n        case \"FBK\":\n          numbers = EmegencyNunbers.Italy;\n          break;\n\n        case \"Budapest\":\n          numbers = EmegencyNunbers.Hungary;\n          break;\n\n        case \"Thessaloniki\":\n          numbers = EmegencyNunbers.Greece;\n          break;\n\n        case \"Cokido\":\n          numbers = EmegencyNunbers.Belgium;\n          break;\n\n        default:\n          numbers = EmegencyNunbers.Greece;\n      }\n\n      return numbers.find(function (n) {\n        return n.service === service;\n      }).number;\n    };\n\n    var history = _this.props.history;\n    var state = history.location.state;\n\n    if (state !== undefined) {\n      _this.state = _objectSpread(_objectSpread({}, state.timeslot), {}, {\n        confirmIsOpen: false,\n        confirmService: \"\"\n      });\n    } else {\n      _this.state = {\n        summary: \"\",\n        confirmIsOpen: false,\n        confirmService: \"\"\n      };\n    }\n\n    return _this;\n  }\n\n  _createClass(TimeslotEmergencyScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          history = _this$props2.history,\n          language = _this$props2.language;\n      var texts = Texts[language].timeslotEmergencyScreen;\n      var _this$state = this.state,\n          confirmIsOpen = _this$state.confirmIsOpen,\n          confirmService = _this$state.confirmService,\n          summary = _this$state.summary;\n      var services = Object.keys(texts.services);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ConfirmDialog, {\n        isOpen: confirmIsOpen,\n        title: \"\".concat(texts.call, \" \").concat(texts.services[confirmService], \"?\"),\n        handleClose: this.handleConfirmClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(BackNavigation, {\n        title: summary,\n        onClick: function onClick() {\n          return history.goBack();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"emergencyContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"emergencyHeader\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }\n      }, texts.header), services.map(function (service) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: service,\n          className: \"emergencyServiceContainer\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"emergencyServiceTitle\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }\n        }, texts.services[service]), /*#__PURE__*/React.createElement(CopyToClipboard, {\n          text: _this2.getServiceNumber(service),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          role: \"button\",\n          tabIndex: -42,\n          className: \"emergencyNumber fas fa-phone\",\n          onClick: function onClick() {\n            _this2.handleEmergency(service);\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 17\n          }\n        })));\n      })));\n    }\n  }]);\n\n  return TimeslotEmergencyScreen;\n}(React.Component);\n\nTimeslotEmergencyScreen.propTypes = {\n  history: PropTypes.object,\n  language: PropTypes.string,\n  enqueueSnackbar: PropTypes.func\n};\nexport default withSnackbar(withLanguage(TimeslotEmergencyScreen));","map":{"version":3,"sources":["C:/Users/nucle/Documents/GitHub/Green-Wizards/client/src/components/TimeslotEmergencyScreen.js"],"names":["React","PropTypes","CopyToClipboard","withSnackbar","withLanguage","Texts","BackNavigation","EmegencyNunbers","ConfirmDialog","TimeslotEmergencyScreen","props","state","confirmIsOpen","handleConfirmClose","choice","confirmService","window","ReactNativeWebView","postMessage","JSON","stringify","action","value","getServiceNumber","setState","handleEmergency","service","enqueueSnackbar","language","texts","timeslotEmergencyScreen","isNative","copy","variant","citylab","process","env","REACT_APP_CITYLAB","numbers","Italy","Hungary","Greece","Belgium","find","n","number","history","location","undefined","timeslot","summary","services","Object","keys","call","goBack","header","map","Component","propTypes","object","string","func"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport { withSnackbar } from \"notistack\";\r\nimport withLanguage from \"./LanguageContext\";\r\nimport Texts from \"../Constants/Texts\";\r\nimport BackNavigation from \"./BackNavigation\";\r\nimport EmegencyNunbers from \"../Constants/EmergencyNumbers\";\r\nimport ConfirmDialog from \"./ConfirmDialog\";\r\n\r\nclass TimeslotEmergencyScreen extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { history } = this.props;\r\n    const { state } = history.location;\r\n    if (state !== undefined) {\r\n      this.state = {\r\n        ...state.timeslot,\r\n        confirmIsOpen: false,\r\n        confirmService: \"\"\r\n      };\r\n    } else {\r\n      this.state = {\r\n        summary: \"\",\r\n        confirmIsOpen: false,\r\n        confirmService: \"\"\r\n      };\r\n    }\r\n  }\r\n\r\n  state = { confirmIsOpen: false };\r\n\r\n  handleConfirmClose = choice => {\r\n    const { confirmService } = this.state;\r\n    if (choice === \"agree\") {\r\n      window.ReactNativeWebView.postMessage(\r\n        JSON.stringify({\r\n          action: \"phoneCall\",\r\n          value: this.getServiceNumber(confirmService)\r\n        })\r\n      );\r\n    }\r\n    this.setState({ confirmIsOpen: false, confirmService: \"\" });\r\n  };\r\n\r\n  handleEmergency = service => {\r\n    const { enqueueSnackbar, language } = this.props;\r\n    const texts = Texts[language].timeslotEmergencyScreen;\r\n    if (window.isNative) {\r\n      this.setState({ confirmIsOpen: true, confirmService: service });\r\n    } else {\r\n      enqueueSnackbar(texts.copy, {\r\n        variant: \"info\"\r\n      });\r\n    }\r\n  };\r\n\r\n  getServiceNumber = service => {\r\n    const citylab = process.env.REACT_APP_CITYLAB;\r\n    let numbers;\r\n    switch (citylab) {\r\n      case \"Bologna\":\r\n      case \"Venice\":\r\n      case \"Pescara\":\r\n      case \"Rome\":\r\n      case \"Foscari\":\r\n      case \"FBK\":\r\n        numbers = EmegencyNunbers.Italy;\r\n        break;\r\n      case \"Budapest\":\r\n        numbers = EmegencyNunbers.Hungary;\r\n        break;\r\n      case \"Thessaloniki\":\r\n        numbers = EmegencyNunbers.Greece;\r\n        break;\r\n      case \"Cokido\":\r\n        numbers = EmegencyNunbers.Belgium;\r\n        break;\r\n      default:\r\n        numbers = EmegencyNunbers.Greece;\r\n    }\r\n    return numbers.find(n => n.service === service).number;\r\n  };\r\n\r\n  render() {\r\n    const { history, language } = this.props;\r\n    const texts = Texts[language].timeslotEmergencyScreen;\r\n    const { confirmIsOpen, confirmService, summary } = this.state;\r\n    const services = Object.keys(texts.services);\r\n\r\n    return (\r\n      <div>\r\n        <ConfirmDialog\r\n          isOpen={confirmIsOpen}\r\n          title={`${texts.call} ${texts.services[confirmService]}?`}\r\n          handleClose={this.handleConfirmClose}\r\n        />\r\n        <BackNavigation title={summary} onClick={() => history.goBack()} />\r\n        <div className=\"emergencyContainer\">\r\n          <div className=\"emergencyHeader\">{texts.header}</div>\r\n          {services.map(service => (\r\n            <div key={service} className=\"emergencyServiceContainer\">\r\n              <div className=\"emergencyServiceTitle\">\r\n                {texts.services[service]}\r\n              </div>\r\n              <CopyToClipboard text={this.getServiceNumber(service)}>\r\n                <i\r\n                  role=\"button\"\r\n                  tabIndex={-42}\r\n                  className=\"emergencyNumber fas fa-phone\"\r\n                  onClick={() => {\r\n                    this.handleEmergency(service);\r\n                  }}\r\n                />\r\n              </CopyToClipboard>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTimeslotEmergencyScreen.propTypes = {\r\n  history: PropTypes.object,\r\n  language: PropTypes.string,\r\n  enqueueSnackbar: PropTypes.func\r\n};\r\n\r\nexport default withSnackbar(withLanguage(TimeslotEmergencyScreen));\r\n"]},"metadata":{},"sourceType":"module"}